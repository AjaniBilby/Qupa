program ::= w* ( stmt_top w* )*
	stmt_top ::= library | function | flag_definition | external

#=============================
#  Helper patterns
#=============================
	w ::= " " | "\t" | nl
	nl ::= "\r\n" | "\n"

	digit ::= "0" | "1" | "2" | "3" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
		digit_nz ::= "1" | "2" | "3" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
	letter ::= letter_upper | letter_lower
		letter_lower ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "t" | "s" | "u" | "v" | "w" | "x" | "y" | "z"
		letter_upper ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "T" | "S" | "U" | "V" | "W" | "X" | "Y" | "Z"


#=============================
#  Constants
#=============================
comment ::= comment_single | comment_multi
	comment_single ::= "//" !( nl )* nl
	comment_multi  ::= "/*" ( "\\*" | !( "*/" )* )* "*/"


#=============================
#  Constants
#=============================
	constant ::= boolean | string | hexidecimal | octal | binary | float | integer

	string ::= string_unicode | string_text | string_multiline
		string_unicode   ::= "\"" ( "\\\"" | !( "\"" )+ )* "\""
		string_text      ::= "'" ( "\\'"  | !( "'"  )+ )* "'"
		string_multiline ::= "`" ( "\\`"  | !( "`"  )+ )* "`"

	hexidecimal ::= "0x" hex_char+
		hex_char ::= digit | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

	octal ::= "0o" octal_char+
		octal_char ::= "0" | "1" | "2" | "3"

	binary ::= "0b" ( "0" | "1" )+

	boolean ::= "true" | "false"

	integer ::= digit+
	float   ::= integer "." integer ( "e" "-"? integer )?


#=============================
#  Variables
#=============================
	name ::= letter ( letter | digit | "_" )*
	variable ::= name accessor?
		accessor ::= ( accessor_arrow | accessor_dot | accessor_dynamic ) accessor?
			accessor_arrow ::= "->" name
			accessor_dot   ::= "." name
			accessor_dynamic ::= "[" w* expr w* "]"

	data_type ::= pointer | variable
		pointer ::= "@" variable

	declare ::= data_type w+ name w* ";"


#=============================
#  Function
#=============================
function ::= func_head w* function_body w* ";"
	func_head ::= data_type w+ name w+ func_arguments w* func_modifier?
	func_modifier ::= ":" w* ( func_mod w* )+
		func_mod ::= "inline" | "async"
	func_arguments ::= "(" w* ( func_arg w* )? ( "," w* func_arg w* )* ")"
		func_arg ::= "^"? data_type w+ name ( w* "=" w* constant )?
	function_body ::= "{" w* ( func_stmt w* )* "}"
	func_stmt ::= return | declare
function_outline ::= func_head w* ";"



	return ::= "return" w+ expr w* ";"


#=============================
#  Template
#=============================
template ::= "template" w*  w* template_opperand
	template_arguments ::= "(" w* ( template_arg w* )? ( "," w* template_arg w* )* ")"
		template_arg ::= "^"? data_type w+ name flags?
	template_opperand ::= function | function_head


#=============================
#  Expression
#=============================
expr ::= expr_opperand
	expr_opperand ::= variable | constant


#=============================
#  Library Management
#=============================
	library ::= import | expose

	import ::= import_as | import_direct
		import_as ::= "import" w* string w* ";"
		import_direct ::= "import" w* string w+ "as" w+ name w* ";"

	expose ::= "expose" w+ ( "*" | name ) w* ";"


#=============================
#  Flags
#=============================
flags ::= ":" w* "[" variable? ( w* "," w* variable )* w* "]" w* ";"
flag_definition ::= "flag" w+ name w+ "[" w* name ( w* "," w* name )* w* "]" w* ";"


#=============================
#  External
#=============================
external ::= "external" w+ external_mode w* "{" w* external_body w* "}"
	external_mode ::= "assume" | "assume"
	external_body ::= ( external_term w* )*
	external_term ::= type_def | structure | function_outline | declare

type_def ::= "type" w+ name w+ "size" w+ integer w* ";"

structure ::= "struct" w* "{" stuct_body w* "}" w* ";"
	struct_body ::= ( declare )*