program ::= w* ( stmt_top w* )*
	stmt_top ::= comment | library | class | template | struct | flag_definition | external | alias | function

#=============================
#  Helper patterns
#=============================
	w ::= " " | "\t" | nl
	nl ::= "\r\n" | "\n"

	digit ::= "0" | "1" | "2" | "3" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
		digit_nz ::= "1" | "2" | "3" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
	letter ::= letter_upper | letter_lower
		letter_lower ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "t" | "s" | "u" | "v" | "w" | "x" | "y" | "z"
		letter_upper ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "T" | "S" | "U" | "V" | "W" | "X" | "Y" | "Z"


#=============================
#  Comments
#=============================
	comment ::= comment_single | comment_multi
		comment_single ::= "//" !( nl )* nl
		comment_multi  ::= "/*" ( "\\*" | !( "*/" )* )* "*/"


#=============================
#  Constants
#=============================
	constant ::= boolean | string | hexidecimal | octal | binary | float | integer

	string ::= string_unicode | string_text | string_multiline
		string_unicode   ::= "\"" ( "\\\"" | !( "\"" ) )* "\""
		string_text      ::= "'" ( "\\'"  | !( "'"  ) )* "'"
		string_multiline ::= "`" ( "\\`"  | !( "`"  ) )* "`"

	hexidecimal ::= "0x" hex_char+
		hex_char ::= digit | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

	octal ::= "0o" octal_char+
		octal_char ::= "0" | "1" | "2" | "3"

	binary ::= "0b" ( "0" | "1" )+

	boolean ::= "true" | "false"

	integer ::= "-"? integer_u
		integer_u ::= ( digit_nz digit* ) | zero
		zero ::= "0"
	float   ::= integer "." integer_u ( "e" integer )?	


#=============================
#  Variables
#=============================
	name ::= letter ( letter | digit | "_" )*
	variable ::= name accessor*
		accessor ::= accessor_dynamic | accessor_refer | accessor_static
			accessor_dynamic ::= "[" w* call_args w* "]"
			accessor_refer   ::= "->" name
			accessor_static  ::= "." name

	data_type ::= pointer | deref | variable
		pointer ::= "@" variable
		deref   ::= "$" variable

	declare ::= data_type w+ name w* ";"

	assign ::= variable w* "=" w* expr w* ";"


#=============================
#  Flags
#=============================
	flags ::= ":" w* "[" w* flag_args w* "]"
		flag_args ::= variable ( w* "," w* variable )*
	flag_definition ::= "flag" w+ name w+ "[" w* name ( w* "," w* name )* w* "]" w* ";"


#=============================
#  Function
#=============================
	function ::= func_head w* function_body w* ";"?
		func_head ::= data_type w+ name w* func_arguments w* flags? w*
			func_arguments ::= "(" w* func_arg_list? ")"
				func_arg_list ::= func_arg w* ( "," w* func_arg w* )*
				func_arg      ::= data_type w+ name ( w* "=" w* constant )?
		function_body ::= "{" w* ( func_stmt w* )* "}"
			func_stmt ::= comment | if | for | while | return | asm | call_procedure | declare | assign

	function_outline ::= func_head w* ";"

	call ::= variable w* "(" w* call_args? w* ")"
		call_args ::= expr ( w* "," w* expr )*
	call_procedure ::= variable w* "(" w* call_args? w* ")" w* ";"

	return ::= "return" ( w+ expr )? w* ";"


#=============================
#  Structure
#=============================
	struct  ::= "struct" w+ name w+ "{" w* struct_body w* "}" w* ";"?
		struct_body ::= ( w* struct_stmt )*
		struct_stmt ::= comment | declare


#=============================
#  Class
#=============================
	class ::= "class" w+ name w* flags? w* class_inherit? w* "{" class_body "}" w* ";"?
		class_inherit ::= "extends" w+ variable
		class_body ::= ( w* class_stmt )* w*
		class_stmt ::= comment | template | class_access | function | declare | function_outline
		class_access ::= "public:" | "private:" | "protected:" | "static:"


#=============================
#  Template
#=============================
	template ::= "template" w* template_arguments w* template_opperand
		template_arguments ::= "(" w* ( template_arg w* )? ( "," w* template_arg w* )* ")"
			template_arg ::= "^"? data_type w+ name flags?
		template_opperand ::= function_outline | function | class


#=============================
#  Expression
#=============================
	expr ::= expr_p5

	expr_p5       ::= expr_p5_and | expr_p5_or | expr_p4
		expr_p5_and      ::= w* expr_p4 w* "&&" w* expr_p5
		expr_p5_or       ::= w* expr_p4 w* "||" w* expr_p5
	expr_p4       ::= expr_p4_modulus | expr_p3
		expr_p4_modulus  ::= w* expr_p3 w* "%" w*  expr_p4
	expr_p3       ::= expr_p3_multiply | expr_p3_divide | expr_p2
		expr_p3_multiply ::= w* expr_p2 w* "*" w* expr_p3
		expr_p3_divide   ::= w* expr_p2 w* "/" w* expr_p3
	expr_p2       ::= expr_p2_add | expr_p2_sub | expr_p1
		expr_p2_add      ::= w* expr_p1 w* "+" w* expr_p2
		expr_p2_sub      ::= w* expr_p1 w* "-" w* expr_p2
	expr_p1       ::= expr_p1_invert | expr_p1_address | expr_p1_value | expr_opperand
		expr_p1_invert   ::= w* "!" w* expr_opperand
		expr_p1_address  ::= w* "@" w* expr_opperand
		expr_p1_value    ::= w* "$" w* expr_opperand
	expr_opperand ::= call | expr_brackets | constant | variable
		expr_brackets    ::= "(" w* expr w* ")"


#=============================
#  Library Management
#=============================
	library ::= import | import

	import ::= import_as | import_direct
		import_as ::= "import" w* string w* ";"
		import_direct ::= "import" w* string w+ "as" w+ name w* ";"

	alias ::= "alias" w+ name w+ variable w* ";"


#=============================
#  External
#=============================
	external ::= "external" w+ external_mode w* "{" w* external_body w* "}" ";"?
		external_mode ::= "assume" | "export"
		external_body ::= ( external_term w* )*
		external_term ::= type_def | struct | function_outline | declare | comment

	type_def ::= "type" w+ name w+ "size" w+ integer w* ";"

#=============================
#  LLVM IR manipulation
#=============================
  asm ::= "asm" w+ asm_param+ w* ";"
		asm_param ::= w* asm_opperand
		asm_opperand ::= string | variable


#=============================
#  If statement
#=============================
	if ::= if_stmt ( w* elif_stmt )* w* else_stmt?
		if_stmt   ::= "if"   w* "(" w* expr w* ")" w* if_body
		elif_stmt ::= "elif" w* "(" w* expr w* ")" w* if_body
		else_stmt ::= "else" w* if_body

		if_body ::= "{" w* ( func_stmt w* )* "}"


#=============================
#  Loops
#=============================
	for ::= "for" w* "(" w* for_condition w* ")" w* "{" w* for_body w* "}"
		for_condition ::= expr w* ";" w* expr w* ";" expr
		for_body ::= func_stmt*

	while ::= "while" w* "(" w* expr w* ")" w* "{" w* while_body w* "}"
		while_body ::= func_stmt*