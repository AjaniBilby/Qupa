import "memory.qp" as Memory;
import "string.qp";


class wild primative void {
	void __constructor__(){}
	void __destructor__(){}
	void __duplicate__(@wild other){
		Memory::Duplicate(@this, @other, sizeof(this))
	}

	Memory.Heap getHeap(){
		return new Memory.Heap(@this, sizeof(this));
	}

	String toString(){
		return "["+TypeName(this)+"]";
	}
}
expose wild;


class void primative void {}
expose void;


class bool primative bool {}
expose bool;


class Number primative double                {}
expose Number;

class int    primative int    extends number {}
class uint   primative uint   extends int    {}
expose int; expose uint;

class u8  primative uint      extends uint   {}
class u16 primative uint8     extends u8     {}
class u32 primative uint16    extends u32    {}
class u64 primative uint32    extends u64    {}
expose u8; expose u16; expose u32; expose u64;

class size_t primative size_t extends uint   {}
expose size_t;

class i8   primative int      extends uint   {}
class i16  primative int8     extends i8     {}
class i32  primative int16    extends i16    {}
class i64  primative int32    extends i32    {}
expose i8; expose i16; expose i32; expose i64;

class float  primative float  extends int {}
class double primative double extends float  {}
expose float; expose double;


class char primative char;






/**
 * Returns the size of a given class
 * @param the object or type who's size is in question.
 * @returns the number of bytes
 */
size_t sizeof(^wild target) primative sizeof;
expose sizeof;