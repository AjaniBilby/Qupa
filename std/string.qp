import "array.qp";

/**
 * Used to store text with text specific behaviour
 * Undefined behaviour with Unicode characters
 */
class String extends Vector<char>{
	void toLowerCase();
	void toUpperCase();

	size_t length(){
		return this.size();
	}

	/**
	 * Test if a specific sub-string is present at a given index
	 */
	bool containsAt(String phrase, size_t index){
		size_t length;
		if (index + length > this.length()){
			return false;
		}

		for (size_t i=0; i<length; i++){
			if (this[index+i] != phrase[i]){
				return false;
			}
		}

		return true;
	}

	Vector<String> split(String phrase){
		Vector<String> out;
		
		size_t length = this.length();
		size_t last = 0;
		for (size_t i=0; i<length; i++){
			if (this.containsAt(phrase, i)){
				out.push(this.slice(last, i));
				i += phrase.length();
				last = i;
			}
		}

		// Push the remaining elements
		out.push(this.slice(last, i));
		i += phrase.length();
		last = i;

		return out;
	}
	Vector<String> split(^Array<String> phrase);
}
expose String;