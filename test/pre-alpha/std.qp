external assume {
	type i32 size 4;
	type float size 4;
	type double size 4;
	type void size 0;
	type i1 size 4;

	i32 i32_add(i32 a, i32 b);
	i32 i32_sub(i32 a, i32 b);
	i32 i32_mul(i32 a, i32 b);
	i32 i32_div(i32 a, i32 b);
	i32 i32_rem(i32 a, i32 b);
	i1 i32_equal(i32 a, i32 b);
	i1 i32_gt(i32 a, i32 b);
	i1 i32_ge(i32 a, i32 b);
	i1 i32_lt(i32 a, i32 b);
	i1 i32_le(i32 a, i32 b);

	float f32_add(float a, float b);
	i1 f32_equal(float a, float b);

	i1 i1_not(i1 a);
	i1 i1_and(i1 a, i1 b);
	i1 i1_or(i1 a, i1 b);

	void i1_print(bool val);
	void i1_println(bool val);
	void i32_print(i32 val);
	void i32_println(i32 val);
	void f32_print(float val);
	void f32_println(float val);
}



/*------------------------------------
	Easier type references
------------------------------------*/
alias int i32; // allow referring to i32 as int
alias bool i1; // allow referring to i1 as bool



/*------------------------------------
	Merge multi name C style functions
	 into single namespace
------------------------------------*/
i32 add (int a, int b) {
	int c = i32_add(a, b);
	return c;
}
float add(float a, float b) {
	float c = f32_add(a, b);
	return c;
}


i32 sub (int a, int b) {
	int c = i32_sub(a, b);
	return c;
}


int mul(int a, int b) {
	int c = i32_mul(a, b);
	return c;
}


int div(int a, int b) {
	int c = i32_div(a, b);
	return c;
}


int rem(int a, int b) {
	int c = i32_rem(a, b);
	return c;
}

bool equal(int a, int b) {
	bool res = i32_equal(a, b);
	return res;
}
bool equal(float a, float b) {
	bool res = f32_equal(a, b);
	return res;
}


bool gt(int a, int b){
	bool c = i32_gt(a, b);
	return c;
}
bool ge(int a, int b) {
	bool c = i32_ge(a, b);
	return c;
}
bool lt(int a, int b){
	bool c = i32_lt(a, b);
	return c;
}
bool le(int a, int b) {
	bool c = i32_le(a, b);
	return c;
}


bool and(bool a, bool b) {
	bool c = i1_and(a, b);
	return c;
}
bool or(bool a, bool b) {
	bool c = i1_or(a, b);
	return c;
}
bool not(bool a) {
	bool c = i1_not(a);
	return c;
}
bool xor(bool a, bool b) {
	bool both = and(a, b);
	if (both) {
		return false;
	} else {
		bool either;
		either = or(a, b);

		if (either) {
			return true;
		} else {
			 return false;
		}
	}
}



void print(int val) {
	i32_print(val);
	return;
}
void print(float val) {
	f32_print(val);
	return;
}
void print(bool val) {
	i1_print(val);
	return;
}


void println(int val) {
	i32_println(val);
	return;
}
void println(float val) {
	f32_println(val);
	return;
}
void println(bool val) {
	i1_println(val);
	return;
}